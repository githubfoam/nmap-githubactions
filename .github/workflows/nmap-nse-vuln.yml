name: "nmap nse vuln CI workflow"


on:
  push:
    branches: [ main ]


jobs:

  ubuntu-latest-nmap-nse-vuln-scan-job:
    name: "vulnerability scanning with Nmap NSE"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" 
      version: "latest"
      name: "alpine/nmap-nse-vuln"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.nmap.nse"    
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch    
    - name: "docker build nmap nse vulscan"
      run: |
        set -xe
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version}
        docker system df -v               
        docker image inspect ${name}:${version} 
        # find ENTRYPOINT & CMD on an image
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        # docker run -i alpine/nmap-nse-vuln:latest nmap -h #OK
        # docker run alpine/nmap-nse-vuln:latest nmap -h #OK
        # docker run alpine/nmap-nse-vuln:latest nmap -v -A scanme.nmap.org #OK
        docker run ${name}:${version} --script-help "*" | grep Categories |wc -l 
        # docker run alpine/nmap-nse-vuln:latest \
        #   nmap -sV --script=vulscan/vulscan.nse scanme.nmap.org #OK
        # use a single database
        docker run alpine/nmap-nse-vuln:latest \
          --script-args vulscandb=openvas scanme.nmap.org #OK